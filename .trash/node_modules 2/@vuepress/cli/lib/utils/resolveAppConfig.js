"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAppConfig = void 0;
const shared_1 = require("@vuepress/shared");
const utils_1 = require("@vuepress/utils");
/**
 * Resolve app config according to:
 *
 * - default options
 * - cli options
 * - user config file
 */
const resolveAppConfig = ({ defaultAppConfig, cliAppConfig, userConfig, }) => {
    const appConfig = {
        // allow setting default app config via `cli()`
        // for example, set different default bundler in `vuepress` and `vuepress-vite` package
        ...defaultAppConfig,
        // use cli options to override config file
        ...userConfig,
        ...cliAppConfig,
    };
    if (appConfig.bundler === undefined || appConfig.theme === undefined) {
        utils_1.logger.error(`${utils_1.chalk.magenta('bundler')} and ${utils_1.chalk.magenta('theme')} are required`);
        return null;
    }
    if (appConfig.base &&
        !(appConfig.base.startsWith('/') && appConfig.base.endsWith('/'))) {
        const rawBase = appConfig.base;
        appConfig.base = (0, shared_1.ensureLeadingSlash)((0, shared_1.ensureEndingSlash)(rawBase));
        utils_1.logger.warn(`${utils_1.chalk.magenta('base')} should start and end with a slash (/),` +
            ` so it has been normalized from ${utils_1.chalk.magenta(rawBase)}` +
            ` to ${utils_1.chalk.magenta(appConfig.base)}`);
    }
    if (appConfig.dest &&
        utils_1.path.normalize(appConfig.source).includes(utils_1.path.normalize(appConfig.dest))) {
        utils_1.logger.warn(`${utils_1.chalk.magenta('dest')} directory would be emptied during build,` +
            ` so we fallback it to the default directory for the safety of your source files`);
        delete appConfig.dest;
    }
    return appConfig;
};
exports.resolveAppConfig = resolveAppConfig;
