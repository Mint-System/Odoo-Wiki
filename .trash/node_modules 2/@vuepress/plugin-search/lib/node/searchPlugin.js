"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchPlugin = void 0;
const utils_1 = require("@vuepress/utils");
const chokidar = require("chokidar");
const prepareSearchIndex_1 = require("./prepareSearchIndex");
const searchPlugin = ({ locales = {}, hotKeys = ['s', '/'], maxSuggestions = 5, isSearchable = () => true, getExtraFields = () => [], } = {}) => ({
    name: '@vuepress/plugin-search',
    clientConfigFile: utils_1.path.resolve(__dirname, '../client/config.js'),
    define: {
        __SEARCH_LOCALES__: locales,
        __SEARCH_HOT_KEYS__: hotKeys,
        __SEARCH_MAX_SUGGESTIONS__: maxSuggestions,
    },
    onPrepared: async (app) => {
        await (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields });
    },
    onWatched: (app, watchers) => {
        // here we only watch the page data files
        // if the extra fields generated by `getExtraFields` are not included
        // in the page data, the changes may not be watched
        const searchIndexWatcher = chokidar.watch('internal/pageData/*', {
            cwd: app.dir.temp(),
            ignoreInitial: true,
        });
        searchIndexWatcher.on('add', () => {
            (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields });
        });
        searchIndexWatcher.on('change', () => {
            (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields });
        });
        searchIndexWatcher.on('unlink', () => {
            (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields });
        });
        watchers.push(searchIndexWatcher);
    },
});
exports.searchPlugin = searchPlugin;
